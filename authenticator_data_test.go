package webauthn

import (
	"encoding/base64"
	"encoding/json"
	"os"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestMarshalAuthenticatorData(t *testing.T) {
	authenticatorData1 := &AuthenticatorData{
		RPIDHash: RPIDHash{
			0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
			0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
			0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
			0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
		},
		Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
		SignCount: 90,
		AttestedCredentialData: &AttestedCredentialData{
			AAGUID: AAGUID{
				0x55, 0x0e, 0x4b, 0x54, 0xaa, 0x47, 0x40, 0x9f,
				0x9a, 0x95, 0x1a, 0xb7, 0x6c, 0x13, 0x01, 0x31,
			},
			CredentialID: []byte{
				0x53, 0x97, 0x31, 0x14, 0xdc, 0x4b, 0x6d, 0x4f,
				0x7e, 0x48, 0x08, 0xb5, 0x2b, 0xb9, 0x3d, 0x6a,
				0xd6, 0x30, 0x5e, 0x18, 0x21, 0x90, 0x03, 0x1b,
				0xc6, 0x92, 0xff, 0xfd, 0x53, 0xed, 0x06, 0x5c,
			},
			CredentialPublicKey: []byte{
				0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
				0x58, 0x20, 0x1b, 0x87, 0xe0, 0x50, 0x04, 0x9c,
				0xfb, 0x25, 0xe4, 0x36, 0xed, 0xd5, 0x6f, 0xbb,
				0x7b, 0x72, 0x46, 0x27, 0xa2, 0x11, 0xe5, 0xf2,
				0x0d, 0x8a, 0x1a, 0x59, 0xab, 0x51, 0x77, 0x2f,
				0xc3, 0xee, 0x22, 0x58, 0x20, 0xad, 0xd3, 0x2b,
				0xde, 0xa3, 0xba, 0x62, 0xa5, 0xc0, 0x89, 0x79,
				0x64, 0x0d, 0xb3, 0x1e, 0x62, 0x8d, 0x2f, 0x3e,
				0x0a, 0xdb, 0x3b, 0x00, 0x36, 0xad, 0x57, 0xe2,
				0xd1, 0xe9, 0xf0, 0xc3, 0x59,
			},
		},
	}
	rawData, err := authenticatorData1.Marshal()
	assert.NoError(t, err)

	authenticatorData2, _, err := UnmarshalAuthenticatorData(rawData)
	assert.NoError(t, err)
	assert.Equal(t, authenticatorData1, authenticatorData2)
}

func TestUnmarshalAuthenticatorData(t *testing.T) {
	readAuthData := func(name string) []byte {
		raw, err := os.ReadFile("testdata/attestation" + name + "Response.json")
		require.NoError(t, err)
		var obj struct {
			Response struct {
				AttestationObject string `json:"attestationObject"`
			} `json:"response"`
		}
		err = json.Unmarshal(raw, &obj)
		require.NoError(t, err)

		raw, err = base64.RawURLEncoding.DecodeString(obj.Response.AttestationObject)
		require.NoError(t, err)

		attestationObject, remaining, err := UnmarshalAttestationObject(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)

		return attestationObject.AuthData
	}

	t.Run("android key", func(t *testing.T) {
		raw := readAuthData("AndroidKey")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 90,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x55, 0x0e, 0x4b, 0x54, 0xaa, 0x47, 0x40, 0x9f,
					0x9a, 0x95, 0x1a, 0xb7, 0x6c, 0x13, 0x01, 0x31,
				},
				CredentialID: []byte{
					0x53, 0x97, 0x31, 0x14, 0xdc, 0x4b, 0x6d, 0x4f,
					0x7e, 0x48, 0x08, 0xb5, 0x2b, 0xb9, 0x3d, 0x6a,
					0xd6, 0x30, 0x5e, 0x18, 0x21, 0x90, 0x03, 0x1b,
					0xc6, 0x92, 0xff, 0xfd, 0x53, 0xed, 0x06, 0x5c,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x1b, 0x87, 0xe0, 0x50, 0x04, 0x9c,
					0xfb, 0x25, 0xe4, 0x36, 0xed, 0xd5, 0x6f, 0xbb,
					0x7b, 0x72, 0x46, 0x27, 0xa2, 0x11, 0xe5, 0xf2,
					0x0d, 0x8a, 0x1a, 0x59, 0xab, 0x51, 0x77, 0x2f,
					0xc3, 0xee, 0x22, 0x58, 0x20, 0xad, 0xd3, 0x2b,
					0xde, 0xa3, 0xba, 0x62, 0xa5, 0xc0, 0x89, 0x79,
					0x64, 0x0d, 0xb3, 0x1e, 0x62, 0x8d, 0x2f, 0x3e,
					0x0a, 0xdb, 0x3b, 0x00, 0x36, 0xad, 0x57, 0xe2,
					0xd1, 0xe9, 0xf0, 0xc3, 0x59,
				},
			},
		}, authenticatorData)
	})
	t.Run("apple", func(t *testing.T) {
		raw := readAuthData("Apple")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x56, 0x1e, 0x8f, 0x3f, 0x6d, 0x63, 0xd0, 0xcc,
				0x03, 0x0a, 0x61, 0x12, 0x2b, 0x19, 0x7b, 0xbf,
				0xfc, 0xf9, 0x0c, 0x51, 0xfb, 0xaa, 0x1c, 0xce,
				0x11, 0x1f, 0xb2, 0x5e, 0x6b, 0x85, 0x83, 0x82,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsUV | authenticatorFlagsAT,
			SignCount: 0,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
				CredentialID: []byte{
					0xa2, 0x61, 0x9f, 0x75, 0xa3, 0x48, 0xf9, 0xc6,
					0x20, 0x5a, 0xba, 0xb6, 0x92, 0x53, 0x64, 0xf7,
					0xbc, 0xe4, 0x72, 0xf,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x79, 0xfe, 0x59, 0x08, 0xbb, 0x51,
					0x29, 0xc8, 0x09, 0x38, 0xb7, 0x54, 0xc0, 0x4d,
					0x2b, 0x34, 0x0e, 0xfa, 0x66, 0x15, 0xb9, 0x87,
					0x69, 0x8b, 0xf5, 0x9d, 0xa4, 0xe5, 0x3e, 0xa3,
					0xe6, 0xfe, 0x22, 0x58, 0x20, 0xfb, 0x03, 0xda,
					0xa1, 0x27, 0x0d, 0x58, 0x04, 0xe8, 0xab, 0x61,
					0xc1, 0x5a, 0xac, 0xa2, 0x43, 0x5c, 0x7d, 0xbf,
					0x36, 0x9d, 0x71, 0xca, 0x15, 0xc5, 0x23, 0xb0,
					0x00, 0x4a, 0x1b, 0x75, 0xb7,
				},
			},
		}, authenticatorData)
	})
	t.Run("at key", func(t *testing.T) {
		raw := readAuthData("ATKey")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsUV | authenticatorFlagsAT,
			SignCount: 12,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0xe1, 0xa9, 0x61, 0x83, 0x50, 0x16, 0x4f, 0x24,
					0xb5, 0x5b, 0xe3, 0xae, 0x23, 0x61, 0x4c, 0xc6,
				},
				CredentialID: []byte{
					0x17, 0xc3, 0xf4, 0x45, 0xeb, 0x00, 0x80, 0xd7,
					0x13, 0xe7, 0x77, 0x40, 0xf3, 0x8e, 0x70, 0xbb,
					0x02, 0xdd, 0xe4, 0x82, 0x3b, 0x50, 0x44, 0x1d,
					0x7d, 0xf5, 0x7f, 0xa8, 0xc1, 0x0c, 0x6c, 0x3e,
					0xec, 0xd2, 0x9c, 0x42, 0x99, 0x40, 0xfa, 0x16,
					0x54, 0x9a, 0x6d, 0xa3, 0x81, 0x3c, 0xbd, 0x14,
					0xb3, 0xc9, 0x21, 0x54, 0xc0, 0x16, 0x45, 0x07,
					0xdb, 0xaf, 0xc9, 0x0d, 0x10, 0x65, 0x20, 0xf9,
					0xd1, 0x99, 0xd2, 0x9c, 0xc6, 0x73, 0x9c, 0x7b,
					0x1a, 0x63, 0x91, 0x86, 0x8f, 0x61, 0x79, 0xf6,
					0xe2, 0xa0, 0x53, 0xf1, 0x09, 0x3c, 0xb9, 0xe5,
					0xd0, 0x6d, 0x2b, 0xf2, 0x95, 0x21, 0x8a, 0x4a,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x4d, 0x16, 0x3c, 0x8e, 0xa2, 0x18,
					0xe2, 0x64, 0xb0, 0x14, 0x28, 0x4c, 0x37, 0xf5,
					0x52, 0x74, 0x72, 0x66, 0xb3, 0x33, 0x86, 0x44,
					0x7c, 0xce, 0x1a, 0xeb, 0x6c, 0x6f, 0x27, 0x83,
					0x19, 0xc3, 0x22, 0x58, 0x20, 0x91, 0xee, 0x30,
					0x72, 0x5d, 0x4b, 0xd7, 0x4d, 0xad, 0x94, 0x76,
					0x1d, 0xe5, 0x8d, 0x54, 0xa2, 0x0d, 0x64, 0x2e,
					0x9e, 0x5d, 0x58, 0x93, 0xa2, 0x4c, 0x25, 0x8b,
					0xdd, 0x60, 0xe1, 0x75, 0x3e,
				},
			},
		}, authenticatorData)
	})
	t.Run("none", func(t *testing.T) {
		raw := readAuthData("None")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 0,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
				CredentialID: []byte{
					0xfe, 0x6a, 0x32, 0x63, 0xbe, 0x37, 0xd1, 0x01,
					0xb1, 0x2e, 0x57, 0xca, 0x96, 0x6c, 0x00, 0x22,
					0x93, 0xe4, 0x19, 0xc8, 0xcd, 0x01, 0x06, 0x23,
					0x0b, 0xc6, 0x92, 0xe8, 0xcc, 0x77, 0x12, 0x21,
					0xf1, 0xdb, 0x11, 0x5d, 0x41, 0x0f, 0x82, 0x6b,
					0xdb, 0x98, 0xac, 0x64, 0x2e, 0xb1, 0xae, 0xb5,
					0xa8, 0x03, 0xd1, 0xdb, 0xc1, 0x47, 0xef, 0x37,
					0x1c, 0xfd, 0xb1, 0xce, 0xb0, 0x48, 0xcb, 0x2c,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0xa6, 0xd1, 0x09, 0x38, 0x5a, 0xc7,
					0x8e, 0x5b, 0xf0, 0x3d, 0x1c, 0x2e, 0x08, 0x74,
					0xbe, 0x6d, 0xbb, 0xa4, 0x0b, 0x4f, 0x2a, 0x5f,
					0x2f, 0x11, 0x82, 0x45, 0x65, 0x65, 0x53, 0x4f,
					0x67, 0x28, 0x22, 0x58, 0x20, 0x43, 0xe1, 0x08,
					0x2a, 0xf3, 0x13, 0x5b, 0x40, 0x60, 0x93, 0x79,
					0xac, 0x47, 0x42, 0x58, 0xaa, 0xb3, 0x97, 0xb8,
					0x86, 0x1d, 0xe4, 0x41, 0xb4, 0x4e, 0x83, 0x08,
					0x5d, 0x1c, 0x6b, 0xe0, 0xd0,
				},
			},
		}, authenticatorData)
	})
	t.Run("packed", func(t *testing.T) {
		raw := readAuthData("Packed")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsUV | authenticatorFlagsAT,
			SignCount: 10338,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x42, 0x38, 0x32, 0x45, 0x44, 0x37, 0x33, 0x43,
					0x38, 0x46, 0x42, 0x34, 0x45, 0x35, 0x41, 0x32,
				},
				CredentialID: []byte{
					0x85, 0x47, 0xfb, 0x58, 0x8d, 0xc8, 0x66, 0x6a,
					0x0b, 0x3b, 0x36, 0x21, 0x1c, 0x57, 0xbb, 0x53,
					0xe7, 0x5f, 0xe1, 0x00, 0xf5, 0xee, 0x54, 0x01,
					0x32, 0x2f, 0x62, 0x4b, 0xec, 0xf7, 0x75, 0x61,
					0x65, 0xaf, 0xbf, 0x4c, 0x5c, 0xea, 0x13, 0x47,
					0xc7, 0x49, 0xcd, 0xbf, 0xd8, 0xee, 0xc0, 0x2c,
					0xb4, 0x70, 0x6b, 0x70, 0x2d, 0x67, 0xbf, 0xca,
					0x4e, 0xaf, 0xa6, 0x85, 0xcf, 0x9d, 0x0a, 0xeb,
					0x98, 0xee, 0x61, 0x75, 0xad, 0xf2, 0x4d, 0xba,
					0x6c, 0xab, 0xbe, 0x1e, 0xee, 0x02, 0xba, 0x53,
					0xe8, 0xe7, 0x76, 0xc8, 0x4a, 0xd2, 0x78, 0x92,
					0x93, 0xab, 0xd8, 0x39, 0x6b, 0xe9, 0x9e, 0x03,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x0f, 0x51, 0x1e, 0xfa, 0x63, 0x7d,
					0x6a, 0x16, 0x37, 0xf2, 0x26, 0xed, 0xe6, 0x30,
					0x1b, 0x56, 0x3c, 0x90, 0x0e, 0xfb, 0xb3, 0xb4,
					0x07, 0xf6, 0xe7, 0xfd, 0x4d, 0xe3, 0xe4, 0x9d,
					0x3d, 0xe6, 0x22, 0x58, 0x20, 0x27, 0xcb, 0x4d,
					0xb0, 0xca, 0xcf, 0x3e, 0xb7, 0xb0, 0xb2, 0xda,
					0x9f, 0xeb, 0x92, 0x2d, 0x00, 0xb3, 0x31, 0x04,
					0x88, 0xb8, 0x55, 0x4a, 0x13, 0x21, 0x91, 0x32,
					0x02, 0x45, 0xcd, 0xe9, 0x4d,
				},
			},
		}, authenticatorData)
	})
	t.Run("packed 512", func(t *testing.T) {
		raw := readAuthData("Packed512")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 102,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x23, 0x88, 0xab, 0x8d, 0x89, 0x15, 0x41, 0x46,
					0x93, 0xba, 0xd4, 0x3e, 0x67, 0x1d, 0x25, 0x38,
				},
				CredentialID: []byte{
					0xe9, 0x82, 0x09, 0x13, 0x18, 0x0b, 0x0f, 0x34,
					0xef, 0x7f, 0x2b, 0x3d, 0x5a, 0x04, 0x25, 0x20,
					0x64, 0xcb, 0xd4, 0xbf, 0x58, 0xb3, 0xd6, 0xe1,
					0x69, 0xa0, 0x35, 0x3e, 0xbf, 0x8e, 0x00, 0xf7,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x38, 0x23, 0x20, 0x03,
					0x21, 0x58, 0x42, 0x01, 0xb3, 0x13, 0x0c, 0xae,
					0xa4, 0x3c, 0xfc, 0xbb, 0x52, 0x07, 0xb4, 0x29,
					0x71, 0x7b, 0x08, 0x3c, 0x09, 0x85, 0x81, 0x46,
					0xa0, 0xfa, 0xfd, 0x2b, 0x9f, 0x0a, 0x3e, 0xbe,
					0x2d, 0xeb, 0xd5, 0xe7, 0xb6, 0xb0, 0x1f, 0x27,
					0x85, 0x19, 0xbc, 0x9f, 0x4b, 0xbf, 0x19, 0x07,
					0x87, 0xbf, 0x23, 0xb4, 0x66, 0x9d, 0xd0, 0xc8,
					0xfa, 0x33, 0xb6, 0xe1, 0x3d, 0xd6, 0x67, 0x52,
					0x4c, 0xa0, 0x4d, 0x66, 0x30, 0x22, 0x58, 0x42,
					0x00, 0xa9, 0xc7, 0x7d, 0xb2, 0x02, 0xf6, 0x02,
					0x7c, 0xa5, 0x88, 0x2e, 0x07, 0x79, 0x68, 0xb6,
					0x2e, 0x13, 0x92, 0xfc, 0x94, 0x45, 0xae, 0x37,
					0x99, 0x61, 0xcc, 0x6c, 0x0d, 0x5e, 0x88, 0xba,
					0xa6, 0x3d, 0x09, 0x71, 0x04, 0x7a, 0xd3, 0x20,
					0xb3, 0x23, 0xc1, 0xcf, 0x94, 0x44, 0xb3, 0x12,
					0xfa, 0x6a, 0xb4, 0x23, 0x41, 0xa8, 0x5f, 0x7d,
					0x78, 0x3d, 0x89, 0x11, 0x35, 0x48, 0xaa, 0x48,
					0xb0, 0xbd,
				},
			},
		}, authenticatorData)
	})
	t.Run("tpm sha1", func(t *testing.T) {
		raw := readAuthData("TPMSHA1")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 117,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0xf2, 0x44, 0xb6, 0x7e, 0x53, 0x64, 0x4f, 0xd5,
					0x9f, 0x90, 0xc3, 0x96, 0x22, 0x73, 0x17, 0xdb,
				},
				CredentialID: []byte{
					0x50, 0x90, 0xe8, 0x50, 0x9a, 0x06, 0x88, 0x34,
					0x05, 0xfc, 0x41, 0x19, 0xdc, 0x6f, 0xf3, 0xf4,
					0xb7, 0xea, 0xd7, 0xaf, 0xca, 0x15, 0xa5, 0xed,
					0x31, 0x38, 0xf0, 0x4d, 0x4a, 0xeb, 0x46, 0x57,
				},
				CredentialPublicKey: []byte{
					0xa4, 0x01, 0x03, 0x03, 0x39, 0xff, 0xfe, 0x20,
					0x59, 0x01, 0x00, 0xa5, 0xf6, 0xc8, 0x89, 0xc2,
					0xaa, 0x07, 0x27, 0x6a, 0x42, 0xc0, 0x42, 0xb2,
					0x2d, 0x0f, 0xee, 0xeb, 0x31, 0x9c, 0x64, 0x32,
					0x99, 0xb4, 0x0d, 0x23, 0xb6, 0xfb, 0x67, 0xd5,
					0xa3, 0xe5, 0x21, 0xee, 0xf0, 0x14, 0x0b, 0xd0,
					0x36, 0x08, 0xc8, 0xe8, 0xa0, 0xe2, 0x42, 0xc0,
					0xcf, 0x4c, 0x25, 0x5e, 0x26, 0x3f, 0xd1, 0x03,
					0x8e, 0x35, 0x55, 0xb5, 0x74, 0x67, 0x8a, 0x17,
					0xd9, 0xbe, 0xbc, 0xaa, 0xe0, 0xd8, 0xd0, 0x67,
					0xf8, 0x56, 0x91, 0x78, 0x29, 0x67, 0xcd, 0x3d,
					0xd2, 0x87, 0xe8, 0x7e, 0x04, 0xf3, 0xcd, 0xa6,
					0xf0, 0xe9, 0xc1, 0x6f, 0x5d, 0x26, 0x85, 0xa3,
					0x5b, 0x3f, 0x14, 0xe6, 0x0d, 0x50, 0xd9, 0x2d,
					0x06, 0x63, 0x87, 0x7b, 0x9b, 0x5f, 0x56, 0x79,
					0xe8, 0x53, 0x60, 0xe9, 0xc4, 0x26, 0xcf, 0x86,
					0xc4, 0x9c, 0x71, 0x7e, 0xed, 0x7d, 0x65, 0xec,
					0x07, 0x0d, 0x39, 0x18, 0x73, 0x77, 0x38, 0x0c,
					0xee, 0xe4, 0x57, 0x87, 0x0a, 0x3d, 0x52, 0xc0,
					0x33, 0xa6, 0xee, 0x08, 0xa3, 0x53, 0x82, 0x4e,
					0xc6, 0xf9, 0x0d, 0xa0, 0xe7, 0x9e, 0x0d, 0xdf,
					0xdd, 0x8f, 0x6a, 0x0e, 0x7f, 0x0e, 0x1b, 0x73,
					0x08, 0xff, 0x92, 0x18, 0xb6, 0x6d, 0x6a, 0x1a,
					0x09, 0x98, 0xef, 0x69, 0xd2, 0x12, 0x22, 0x21,
					0x84, 0xf0, 0xa4, 0xda, 0x5b, 0xe6, 0x6a, 0x33,
					0x7a, 0x03, 0x8b, 0x56, 0x81, 0x4b, 0x2d, 0x73,
					0xb4, 0x2d, 0x76, 0x52, 0x84, 0x3c, 0x17, 0x7e,
					0x21, 0x3b, 0x46, 0x74, 0xa6, 0x13, 0x4b, 0x0a,
					0xa2, 0x85, 0xa1, 0xf3, 0x05, 0x07, 0x7c, 0x0f,
					0xe7, 0x7f, 0x1c, 0x3a, 0xa0, 0x70, 0xe5, 0x84,
					0x08, 0xb2, 0xa8, 0xe7, 0x5f, 0xd8, 0xab, 0x26,
					0x84, 0x8a, 0xe1, 0xa5, 0xbf, 0xab, 0x0f, 0xa2,
					0x7d, 0x4b, 0x32, 0xc1, 0x0b, 0xe8, 0xf9, 0x55,
					0xc3, 0x8e, 0xcf, 0x21, 0x43, 0x01, 0x00, 0x01,
				},
			},
		}, authenticatorData)

	})
	t.Run("tpm sha256", func(t *testing.T) {
		raw := readAuthData("TPMSHA256")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 67,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0xa7, 0xd6, 0xd9, 0x3a, 0x8a, 0x0d, 0x11, 0xe8,
					0x9a, 0x94, 0xa6, 0xcf, 0x71, 0x07, 0x2f, 0x73,
				},
				CredentialID: []byte{
					0x87, 0xd5, 0xcc, 0x86, 0x45, 0x5e, 0x3c, 0xdd,
					0x4f, 0xae, 0xaf, 0x4a, 0xb3, 0xf5, 0x5f, 0xc0,
					0x8b, 0x15, 0x66, 0xfb, 0x7e, 0x8e, 0x64, 0x91,
					0x4c, 0x49, 0xde, 0xbd, 0x37, 0x3e, 0x28, 0x1f,
				},
				CredentialPublicKey: []byte{
					0xa4, 0x01, 0x03, 0x03, 0x39, 0x01, 0x00, 0x20,
					0x59, 0x01, 0x00, 0xcf, 0xb5, 0x28, 0x20, 0x5a,
					0x5b, 0x23, 0x70, 0x58, 0x90, 0x3b, 0xad, 0x7e,
					0x85, 0x41, 0x7c, 0x8b, 0xed, 0xc5, 0x3d, 0xcc,
					0xaf, 0xb8, 0x04, 0x5c, 0xcb, 0x7a, 0x75, 0xb1,
					0xe6, 0x7e, 0xfc, 0x1e, 0x02, 0x96, 0x13, 0x61,
					0xe5, 0x4f, 0x93, 0xd2, 0xfd, 0x1f, 0x94, 0xc5,
					0x39, 0xa7, 0xa9, 0xec, 0x34, 0x35, 0xa3, 0xe1,
					0xfe, 0xbe, 0xb2, 0x87, 0xbe, 0xda, 0xf5, 0x49,
					0x31, 0x39, 0xb6, 0x77, 0x6e, 0xae, 0x29, 0x80,
					0xf6, 0xcf, 0x07, 0x6b, 0x92, 0xb6, 0x18, 0x5d,
					0x1b, 0xb9, 0x20, 0x5a, 0x94, 0x5e, 0xa1, 0x7e,
					0x91, 0x8f, 0x7d, 0xbf, 0xc4, 0x5c, 0xac, 0x01,
					0x7b, 0x0d, 0x02, 0x83, 0xa3, 0xe1, 0x38, 0x5e,
					0x18, 0x8c, 0xcf, 0xab, 0x84, 0x0a, 0xf9, 0xe3,
					0x12, 0x5a, 0x06, 0x7d, 0x36, 0x19, 0xad, 0x5b,
					0x90, 0xd6, 0x67, 0x63, 0x43, 0xc4, 0x24, 0x8b,
					0xb5, 0x3e, 0xf5, 0x24, 0x07, 0x31, 0x6f, 0xc8,
					0xb1, 0xa2, 0x3c, 0x64, 0xa1, 0xed, 0xba, 0x95,
					0xcd, 0x84, 0xce, 0x58, 0x3d, 0x0c, 0x85, 0x6c,
					0x31, 0xc7, 0x5d, 0x21, 0x3f, 0x8b, 0x23, 0xc6,
					0x87, 0x69, 0x98, 0xe1, 0x24, 0x78, 0xeb, 0xaa,
					0x2e, 0x7a, 0xc2, 0x2e, 0x1b, 0x43, 0x5c, 0x70,
					0x25, 0x24, 0xe5, 0x40, 0xc8, 0xbd, 0x2f, 0xff,
					0x39, 0x49, 0x8d, 0x69, 0x7e, 0xda, 0x06, 0xb2,
					0x93, 0x96, 0x79, 0x0c, 0x16, 0x39, 0x02, 0x03,
					0x56, 0x43, 0x14, 0x2f, 0x7d, 0x65, 0x0a, 0x0b,
					0x14, 0x22, 0x50, 0x1e, 0xa9, 0xce, 0x53, 0xb9,
					0xbc, 0xcd, 0x2b, 0xd3, 0x26, 0x95, 0x32, 0x1b,
					0x67, 0xde, 0x5a, 0x00, 0x0b, 0xd8, 0x69, 0x74,
					0xe5, 0x5d, 0xc8, 0xfe, 0x56, 0xff, 0xbf, 0x9c,
					0x84, 0x2d, 0x77, 0x22, 0x84, 0x5a, 0x00, 0xdf,
					0x74, 0x08, 0x39, 0x2a, 0x43, 0x98, 0xaa, 0x8a,
					0x57, 0x74, 0x97, 0x21, 0x43, 0x01, 0x00, 0x01,
				},
			},
		}, authenticatorData)
	})
	t.Run("trust key t110", func(t *testing.T) {
		raw := readAuthData("TrustKeyT110")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsUV | authenticatorFlagsAT,
			SignCount: 79,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0xda, 0x77, 0x6f, 0x39, 0xf6, 0xc8, 0x4a, 0x89,
					0xb2, 0x52, 0x1d, 0x86, 0x13, 0x7a, 0x46, 0xba,
				},
				CredentialID: []byte{
					0x65, 0xb0, 0xf7, 0x72, 0x32, 0x91, 0xf1, 0x8b,
					0xfe, 0xce, 0x53, 0xa7, 0x7e, 0xd1, 0xc3, 0x9a,
					0x29, 0x56, 0x9d, 0xd7, 0xfc, 0xf3, 0x30, 0x44,
					0xe6, 0x94, 0x17, 0x23, 0xa0, 0x89, 0x00, 0x68,
					0xac, 0xa1, 0xc3, 0x1c, 0x82, 0xbb, 0x37, 0xd3,
					0xc9, 0x32, 0x69, 0x57, 0xd3, 0xc7, 0xa8, 0xe2,
					0xa6, 0x49, 0x45, 0xaa, 0xba, 0x38, 0x31, 0xc2,
					0x53, 0x18, 0xa3, 0x3e, 0xce, 0x83, 0x9e, 0x44,
					0xc1, 0x32, 0x38, 0xd2, 0x27, 0xa0, 0x5b, 0x07,
					0x7d, 0x0a, 0xb0, 0x8c, 0x79, 0xdf, 0x2e, 0x41,
					0x85, 0xb5, 0xb1, 0xb5, 0xcd, 0x99, 0x45, 0x1c,
					0x5e, 0x69, 0x6f, 0x0e, 0xa1, 0x4f, 0xd3, 0x39,
					0xea, 0x46, 0xeb, 0x3a, 0x5a, 0xb0, 0xf1, 0xa4,
					0x68, 0x21, 0xe9, 0x36, 0x95, 0x3f, 0x3b, 0x4e,
					0x5e, 0xed, 0x24, 0x99, 0xbb, 0xc2, 0x02, 0x8c,
					0x37, 0x5b, 0x41, 0xac, 0x47, 0xdd, 0xfa, 0x2f,
					0xb2, 0x4a, 0x87, 0x9c, 0xd3, 0xd0, 0x60, 0x68,
					0xba, 0x3c, 0xe4, 0xc9, 0xfc, 0xa7, 0xde, 0x54,
					0x55, 0x67, 0x1b, 0x0d, 0x49, 0x89, 0x8e, 0x64,
					0x6d, 0x53, 0xef, 0xc0, 0x08, 0xc9, 0x4b, 0x27,
					0xf1, 0x2c, 0xf2, 0x46, 0x62, 0xc2, 0x21, 0xc4,
					0x43, 0x19, 0x9b, 0x61, 0x7c, 0x6e, 0x68, 0x6b,
					0x0e, 0x6e, 0x47, 0x04, 0xa9, 0x54, 0xa3, 0xce,
					0xce, 0xdb, 0xd6, 0xd9, 0xd5, 0x8d, 0x96, 0x31,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x8b, 0x63, 0x2f, 0x64, 0x72, 0x2b,
					0x4b, 0x6d, 0x78, 0x98, 0xb6, 0x99, 0x6e, 0xce,
					0x6c, 0xbb, 0x42, 0xff, 0x82, 0x45, 0xc2, 0x94,
					0x38, 0xa5, 0xed, 0x03, 0x14, 0x0e, 0x8a, 0xd3,
					0xce, 0x8d, 0x22, 0x58, 0x20, 0x4e, 0x41, 0x0e,
					0xe1, 0x52, 0x3d, 0x09, 0x40, 0x47, 0x9d, 0xee,
					0xc3, 0xdd, 0x77, 0x93, 0xec, 0xbf, 0xb2, 0xff,
					0x7c, 0x01, 0xb6, 0xb0, 0x44, 0x68, 0x79, 0xfb,
					0x58, 0x2a, 0x84, 0x82, 0x28,
				},
			},
		}, authenticatorData)
	})
	t.Run("u2f", func(t *testing.T) {
		raw := readAuthData("U2F")
		authenticatorData, remaining, err := UnmarshalAuthenticatorData(raw)
		assert.NoError(t, err)
		assert.Empty(t, remaining)
		assert.Equal(t, &AuthenticatorData{
			RPIDHash: RPIDHash{
				0x49, 0x96, 0x0d, 0xe5, 0x88, 0x0e, 0x8c, 0x68,
				0x74, 0x34, 0x17, 0x0f, 0x64, 0x76, 0x60, 0x5b,
				0x8f, 0xe4, 0xae, 0xb9, 0xa2, 0x86, 0x32, 0xc7,
				0x99, 0x5c, 0xf3, 0xba, 0x83, 0x1d, 0x97, 0x63,
			},
			Flags:     authenticatorFlagsUP | authenticatorFlagsAT,
			SignCount: 0,
			AttestedCredentialData: &AttestedCredentialData{
				AAGUID: AAGUID{
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
					0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				},
				CredentialID: []byte{
					0xee, 0x72, 0x6c, 0xb6, 0xda, 0xf8, 0x74, 0xb4,
					0xac, 0x9a, 0xb5, 0xa7, 0x68, 0x70, 0x77, 0x7a,
					0xca, 0x49, 0xd2, 0xe6, 0xbd, 0xae, 0xc2, 0x76,
					0xc2, 0xcf, 0xbd, 0xdc, 0x11, 0x5c, 0x34, 0xe3,
					0xfa, 0xe2, 0x0f, 0xec, 0xff, 0x8c, 0x0b, 0x14,
					0x3b, 0xe4, 0x96, 0xb3, 0x58, 0x72, 0x0d, 0x01,
					0x08, 0xde, 0x9d, 0x75, 0x48, 0xc9, 0x2f, 0x10,
					0xdf, 0x0d, 0x20, 0x6b, 0x78, 0xa4, 0x0b, 0x03,
				},
				CredentialPublicKey: []byte{
					0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21,
					0x58, 0x20, 0x50, 0xe0, 0x28, 0xe7, 0x1a, 0xac,
					0x26, 0x83, 0xdf, 0x25, 0x6b, 0x14, 0xe7, 0x48,
					0x7b, 0x73, 0x64, 0xbb, 0xfe, 0x59, 0x4f, 0xd0,
					0xac, 0x06, 0x23, 0xab, 0xc9, 0x90, 0x48, 0xf5,
					0x37, 0x8f, 0x22, 0x58, 0x20, 0x36, 0x4c, 0xc4,
					0x9e, 0x05, 0xf8, 0x49, 0xf3, 0x81, 0xf2, 0x31,
					0x04, 0x20, 0x8c, 0x9b, 0xc1, 0x88, 0x0e, 0x89,
					0x9c, 0x70, 0x34, 0x72, 0x1c, 0x52, 0x96, 0x6b,
					0x99, 0x79, 0x3f, 0x57, 0x82,
				},
			},
		}, authenticatorData)
	})
}
